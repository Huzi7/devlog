// Code generated by MockGen. DO NOT EDIT.
// Source: output.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTextContent is a mock of TextContent interface
type MockTextContent struct {
	ctrl     *gomock.Controller
	recorder *MockTextContentMockRecorder
}

// MockTextContentMockRecorder is the mock recorder for MockTextContent
type MockTextContentMockRecorder struct {
	mock *MockTextContent
}

// NewMockTextContent creates a new mock instance
func NewMockTextContent(ctrl *gomock.Controller) *MockTextContent {
	mock := &MockTextContent{ctrl: ctrl}
	mock.recorder = &MockTextContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTextContent) EXPECT() *MockTextContentMockRecorder {
	return m.recorder
}

// GenerateMarkdown mocks base method
func (m *MockTextContent) GenerateMarkdown() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMarkdown")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateMarkdown indicates an expected call of GenerateMarkdown
func (mr *MockTextContentMockRecorder) GenerateMarkdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMarkdown", reflect.TypeOf((*MockTextContent)(nil).GenerateMarkdown))
}

// MockTemplateReader is a mock of TemplateReader interface
type MockTemplateReader struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateReaderMockRecorder
}

// MockTemplateReaderMockRecorder is the mock recorder for MockTemplateReader
type MockTemplateReaderMockRecorder struct {
	mock *MockTemplateReader
}

// NewMockTemplateReader creates a new mock instance
func NewMockTemplateReader(ctrl *gomock.Controller) *MockTemplateReader {
	mock := &MockTemplateReader{ctrl: ctrl}
	mock.recorder = &MockTemplateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateReader) EXPECT() *MockTemplateReaderMockRecorder {
	return m.recorder
}

// ReadTemplate mocks base method
func (m *MockTemplateReader) ReadTemplate() (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemplate")
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemplate indicates an expected call of ReadTemplate
func (mr *MockTemplateReaderMockRecorder) ReadTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemplate", reflect.TypeOf((*MockTemplateReader)(nil).ReadTemplate))
}
