// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/output.go

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	bytes "bytes"
	gomock "github.com/golang/mock/gomock"
	io "io"
	os "os"
	reflect "reflect"
)

// MockTextContent is a mock of TextContent interface
type MockTextContent struct {
	ctrl     *gomock.Controller
	recorder *MockTextContentMockRecorder
}

// MockTextContentMockRecorder is the mock recorder for MockTextContent
type MockTextContentMockRecorder struct {
	mock *MockTextContent
}

// NewMockTextContent creates a new mock instance
func NewMockTextContent(ctrl *gomock.Controller) *MockTextContent {
	mock := &MockTextContent{ctrl: ctrl}
	mock.recorder = &MockTextContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTextContent) EXPECT() *MockTextContentMockRecorder {
	return m.recorder
}

// GenerateMarkdown mocks base method
func (m *MockTextContent) GenerateMarkdown() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMarkdown")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateMarkdown indicates an expected call of GenerateMarkdown
func (mr *MockTextContentMockRecorder) GenerateMarkdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMarkdown", reflect.TypeOf((*MockTextContent)(nil).GenerateMarkdown))
}

// MockTemplateReader is a mock of TemplateReader interface
type MockTemplateReader struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateReaderMockRecorder
}

// MockTemplateReaderMockRecorder is the mock recorder for MockTemplateReader
type MockTemplateReaderMockRecorder struct {
	mock *MockTemplateReader
}

// NewMockTemplateReader creates a new mock instance
func NewMockTemplateReader(ctrl *gomock.Controller) *MockTemplateReader {
	mock := &MockTemplateReader{ctrl: ctrl}
	mock.recorder = &MockTemplateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateReader) EXPECT() *MockTemplateReaderMockRecorder {
	return m.recorder
}

// ReadTemplate mocks base method
func (m *MockTemplateReader) ReadTemplate() (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemplate")
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemplate indicates an expected call of ReadTemplate
func (mr *MockTemplateReaderMockRecorder) ReadTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemplate", reflect.TypeOf((*MockTemplateReader)(nil).ReadTemplate))
}

// GetTemplatePath mocks base method
func (m *MockTemplateReader) GetTemplatePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplatePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTemplatePath indicates an expected call of GetTemplatePath
func (mr *MockTemplateReaderMockRecorder) GetTemplatePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplatePath", reflect.TypeOf((*MockTemplateReader)(nil).GetTemplatePath))
}

// GetTemplate mocks base method
func (m *MockTemplateReader) GetTemplate() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockTemplateReaderMockRecorder) GetTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockTemplateReader)(nil).GetTemplate))
}

// MockFileOps is a mock of FileOps interface
type MockFileOps struct {
	ctrl     *gomock.Controller
	recorder *MockFileOpsMockRecorder
}

// MockFileOpsMockRecorder is the mock recorder for MockFileOps
type MockFileOpsMockRecorder struct {
	mock *MockFileOps
}

// NewMockFileOps creates a new mock instance
func NewMockFileOps(ctrl *gomock.Controller) *MockFileOps {
	mock := &MockFileOps{ctrl: ctrl}
	mock.recorder = &MockFileOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileOps) EXPECT() *MockFileOpsMockRecorder {
	return m.recorder
}

// GetOutputPath mocks base method
func (m *MockFileOps) GetOutputPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOutputPath indicates an expected call of GetOutputPath
func (mr *MockFileOpsMockRecorder) GetOutputPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputPath", reflect.TypeOf((*MockFileOps)(nil).GetOutputPath))
}

// GetFullOutputPath mocks base method
func (m *MockFileOps) GetFullOutputPath(docType string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullOutputPath", docType)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFullOutputPath indicates an expected call of GetFullOutputPath
func (mr *MockFileOpsMockRecorder) GetFullOutputPath(docType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullOutputPath", reflect.TypeOf((*MockFileOps)(nil).GetFullOutputPath), docType)
}

// GenerateFileName mocks base method
func (m *MockFileOps) GenerateFileName(docType string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFileName", docType)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateFileName indicates an expected call of GenerateFileName
func (mr *MockFileOpsMockRecorder) GenerateFileName(docType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFileName", reflect.TypeOf((*MockFileOps)(nil).GenerateFileName), docType)
}

// CreateFile mocks base method
func (m *MockFileOps) CreateFile(docType string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", docType)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockFileOpsMockRecorder) CreateFile(docType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileOps)(nil).CreateFile), docType)
}

// SaveFile mocks base method
func (m *MockFileOps) SaveFile(outputMd string, file io.Writer, docType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveFile", outputMd, file, docType)
}

// SaveFile indicates an expected call of SaveFile
func (mr *MockFileOpsMockRecorder) SaveFile(outputMd, file, docType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileOps)(nil).SaveFile), outputMd, file, docType)
}
